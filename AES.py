from enum import Enum
import numpy as np


class KEY_LENGTH(Enum):
    KL_128 = 'KL_128'
    KL_192 = 'KL_192'
    KL_256 = 'KL_256'


class AES:
    SUB_TAB = np.asarray(
        [
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
        ]
    ).reshape((16, 16))

    INV_SUB_TAB = np.asarray(
        [
            0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
            0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
            0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
            0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
            0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
        ]
    ).reshape((16, 16))

    def __init__(self, length: KEY_LENGTH, key_bytes):
        self._key_length_bits, self._key_length_bytes,\
            self._amount_rounds, self._amount_rows, self._amount_columns = self._set_constants(length)
        self._keys_expnd = self._expand_key(key_bytes)
        self._state = None

    @staticmethod
    def _set_constants(length):
        if length.value == KEY_LENGTH.KL_128.value:
            len_bits = 128
            len_bytes = 4
            amount_rounds = 10
        elif length.value == KEY_LENGTH.KL_192.value:
            len_bits = 198
            len_bytes = 6
            amount_rounds = 12
        elif length.value == KEY_LENGTH.KL_256.value:
            len_bits = 256
            len_bytes = 8
            amount_rounds = 14
        else:
            len_bits = len_bytes = amount_rounds = None
            exit(-1)
        amount_rows = 4
        amount_cols = 4
        return len_bits, len_bytes, amount_rounds, amount_rows, amount_cols

    @staticmethod
    def _lin_to_block(lin_bytes):
        block = np.asarray(lin_bytes)
        block = block.reshape((4, 4))
        block = block.transpose()
        return block

    @staticmethod
    def _block_to_lin(block_bytes):
        lin = block_bytes.transpose()
        lin = lin.flatten()
        return lin

    @staticmethod
    def _sub_bytes(value, table):
        table_row = value >> 4
        table_col = value % 16
        return table[table_row, table_col]

    def sub_bytes(self):
        self._state = self._sub_bytes(self._state, AES.SUB_TAB)

    def inv_sub_bytes(self):
        self._state = self._sub_bytes(self._state, AES.INV_SUB_TAB)

    def _shift_bytes(self, state, shift_sign):
        for row in range(1, self._amount_rows):
            state[row] = np.roll(state[row], shift=shift_sign * row)
        return state

    def shift_bytes(self):
        self._state = self._shift_bytes(self._state, shift_sign=-1)

    def inv_shift_bytes(self):
        self._state = self._shift_bytes(self._state, shift_sign=1)

    @staticmethod
    def _xtime(value):
        return (((value << 1) ^ 0x1B) & 0xFF) if (value & 0x80) else (value << 1)

    @staticmethod
    def _mix_column(column):
        t = column[0] ^ column[1] ^ column[2] ^ column[3]
        u = column[0]
        column[0] ^= t ^ AES._xtime(column[0] ^ column[1])
        column[1] ^= t ^ AES._xtime(column[1] ^ column[2])
        column[2] ^= t ^ AES._xtime(column[2] ^ column[3])
        column[3] ^= t ^ AES._xtime(column[3] ^ u)
        return column

    def mix_columns(self):
        self._state = self._state.transpose()
        for col in range(self._amount_columns):
            self._state[col] = self._mix_column(self._state[col])
        self._state = self._state.transpose()

    def inv_mix_columns(self):
        for col in range(self._amount_columns):
            u = AES._xtime(AES._xtime(self._state[0][col] ^ self._state[2][col]))
            v = AES._xtime(AES._xtime(self._state[1][col] ^ self._state[3][col]))
            self._state[0][col] ^= u
            self._state[1][col] ^= v
            self._state[2][col] ^= u
            self._state[3][col] ^= v
        self.mix_columns()

    def _expand_key(self, key_bytes):
        expanded = self._lin_to_block(key_bytes).transpose()

        iteration_size = len(key_bytes) // 4
        r_con = np.asarray([1, 0, 0, 0])

        while len(expanded) < (self._amount_rounds + 1) * 4:
            word = expanded[-1]

            if len(expanded) % iteration_size == 0:
                word = np.roll(word, shift=-1)
                word = self._sub_bytes(word, AES.SUB_TAB)
                word ^= r_con
                r_con = (r_con << 1) ^ (0x11b & -(r_con >> 7))

            elif len(key_bytes) == 32 and len(expanded) % iteration_size == 4:
                word = self._sub_bytes(word, AES.SUB_TAB)

            word = word ^ expanded[-iteration_size]
            expanded = np.append(expanded, np.expand_dims(word, axis=1))

        return np.split(expanded, self._amount_rounds + 1)

    @staticmethod
    def _add_round_key(state, round_key):
        return state ^ round_key

    def xor_round_key(self, process_round):
        round_key = self._keys_expnd[process_round]
        self._state = self._add_round_key(self._state, round_key)

    def encrypt(self, input_bytes):
        self._state = self._lin_to_block(input_bytes)
        self.xor_round_key(0)
        for enc_round in range(1, self._amount_rounds):
            self.sub_bytes()
            self.shift_bytes()
            self.mix_columns()
            self.xor_round_key(enc_round)
        self.sub_bytes()
        self.shift_bytes()
        self.xor_round_key(self._amount_rounds)
        return self._block_to_lin(self._state)

    def decrypt(self, input_bytes):
        self._state = self._lin_to_block(input_bytes)
        self.xor_round_key(self._amount_rounds)
        for dec_round in range(self._amount_rounds - 1, 0, -1):
            self.inv_shift_bytes()
            self.inv_sub_bytes()
            self.xor_round_key(dec_round)
            self.inv_mix_columns()
        self.inv_shift_bytes()
        self.inv_sub_bytes()
        self.xor_round_key(0)
        return self._block_to_lin(self._state)


def test_128():
    key_data = [240, 2, 14, 24, 111, 95, 30, 30, 75, 39, 85, 175, 153, 9, 201, 4]
    message_data = [5, 16, 73, 93, 220, 42, 55, 121, 45, 0, 198, 68, 247, 12, 60, 1]

    encoder = AES(KEY_LENGTH.KL_128, key_data)

    enc_data = encoder.encrypt(message_data)
    dec_data = encoder.decrypt(enc_data)

    assert message_data == dec_data.tolist()


def test_192():
    key_data = [240, 2, 14, 24, 111, 95, 30, 30, 75, 39, 85, 175, 153, 9, 201, 4]
    message_data = [5, 16, 73, 93, 220, 42, 55, 121, 45, 0, 198, 68, 247, 12, 60, 1]

    encoder = AES(KEY_LENGTH.KL_192, key_data)

    enc_data = encoder.encrypt(message_data)
    dec_data = encoder.decrypt(enc_data)

    assert message_data == dec_data.tolist()


def test_256():
    key_data = [240, 2, 14, 24, 111, 95, 30, 30, 75, 39, 85, 175, 153, 9, 201, 4]
    message_data = [5, 16, 73, 93, 220, 42, 55, 121, 45, 0, 198, 68, 247, 12, 60, 1]

    encoder = AES(KEY_LENGTH.KL_256, key_data)

    enc_data = encoder.encrypt(message_data)
    dec_data = encoder.decrypt(enc_data)

    assert message_data == dec_data.tolist()


if __name__ == '__main__':
    test_128()
    test_192()
    test_256()
